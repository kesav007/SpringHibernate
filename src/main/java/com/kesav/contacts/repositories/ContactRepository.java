package com.kesav.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.kesav.contacts.entities.Contact;

public class ContactRepository {

	private final DataSource dataSource;

	public ContactRepository() {
		Context context = null;
		try {
			try {
				context = new InitialContext();
				dataSource = (DataSource) context.lookup("java:comp/env/jdbc/trainingdb");
			} finally {
				context.close();
			}
		} catch (NamingException e) {
			throw new RuntimeException();
		}
	}

	public void init() throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.execute(
						"create table contact (id integer generated by default as identity primary key, name varchar(255), address_id integer, foreign key (address_id) references address)");
			} catch (Exception e) {
				System.out.println("Unable to create contact table");
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public List<Contact> findAll() throws SQLException {
		List<Contact> contacts = new ArrayList<Contact>();
		Connection connection = dataSource.getConnection();

		try {
			Statement statement = connection.createStatement();
			try {
				ResultSet resultSet = statement.executeQuery("SELECT * FROM CONTACT");
				try {
					while (resultSet.next()) {
						contacts.add(unmarshal(resultSet));
					}
				} finally {
					resultSet.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
		return contacts;
	}

	public Contact find(Long id) throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				ResultSet resultSet = statement.executeQuery("SELECT * FROM CONTACT WHERE ID = " + id);
				try {
					if (!resultSet.next()) {
						return null;
					} else {
						return unmarshal(resultSet);
					}
				} finally {
					resultSet.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	private static Contact unmarshal(ResultSet resultSet) throws SQLException {
		Contact contact = new Contact();
		contact.setId(resultSet.getLong("ID"));
		contact.setName(resultSet.getString("NAME"));
		contact.setAddressId(resultSet.getLong("ADDRESS_ID"));
		return contact;
	}

	public void create(Contact contact) throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String insertQuery = "INSERT INTO CONTACT (NAME, ADDRESS_ID) VALUES ('" + contact.getName() + "', '"
						+ contact.getAddressId() + "')";
				statement.executeUpdate(insertQuery, Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						contact.setId(generatedKeys.getLong("ID"));
					}
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void update(Contact contact) throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate("UPDATE CONTACT SET " + " NAME = '" + contact.getName() + "',"
						+ " ADDRESS_ID = '" + contact.getAddressId() + "' WHERE ID = " + contact.getId());
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void delete(Contact contact) throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate("DELETE FROM CONTACT WHERE ID = " + contact.getId());
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}
}